{"body":"## Usage\r\n\r\n```javascript\r\nnew Paginator(myElement, options);\r\n```\r\n\r\nTo page an element's children, simply pass the element to a new Paginator object.\r\n\r\n```javascript\r\nmyElement = document.getElementById('myElement');\r\npaginator = new Paginator(myElement);\r\npaginator.build();\r\n```\r\n\r\n### Options\r\n\r\nAvailable options and their defaults for Paginator are:\r\n\r\n```javascript\r\noptions = {\r\n  amount: 3,            // Number of items per page\r\n  numbers: true,        // Show numbers navigation\r\n  paddles: true,        // Show next/prev navigation\r\n  prevText: 'Previous', // Text for previous paddle\r\n  nextText: 'Next'      // Text for next paddle\r\n}\r\n```\r\n\r\nYou can also set options after Paginator has been built via the `settings` hash:\r\n\r\n```javascript\r\npaginated = paginator(myElement);\r\n\r\npaginated.settings.amount = 3;\r\npaginated.settings.numbers = true;\r\npaginated.settings.paddles = true;\r\npaginated.settings.prevText = 'Previous';\r\npaginated.settings.nextText = 'Next';\r\n```\r\n\r\n### Callbacks\r\n\r\nPaginator supports callbacks. A callback is a function that is fired after a specific event. There is currently only one callback. You set callbacks in the options hash.\r\n\r\n#### onInvalidPage(pageNumber[int])\r\n\r\n```javascript\r\n{\r\n  onInvalidPage: function (pageNumber) {\r\n    alert('Went to invalid page:' + pageNumber);\r\n  }\r\n}\r\n```\r\n\r\n`onInvalidPage` is fired when the user goes to an invalid page. This should never happen and is installed for precautionary reasons.\r\n\r\n### Methods\r\n\r\nPaginator currently supports three methods: `build`, `goToPage` and `destroy`.\r\n\r\n#### build\r\n\r\nBuilds and binds events to the paginator. Returns the `Paginator` instance. `build` cannot be ran once it's built.\r\n\r\n```javascript\r\npaginated = paginator(myElement);\r\npaginated.build();\r\n```\r\n\r\n#### goToPage(pageNumber[int])\r\n\r\nTells the Paginator instance to go to a specific page. If the page number is out of bounds, the `onInvalidPage` callback will fire. Returns the `Paginator` instance.\r\n\r\n_Note: `goToPage` requires the Paginator instance to be built. Run `build` prior to using this method._\r\n\r\n```javascript\r\npaginated = paginator(myElement);\r\npaginated.build();\r\npaginated.goToPage(5);\r\n```\r\n\r\n#### destroy\r\n\r\nReverts the `Paginator` instance back to the visual state prior to being built.\r\n\r\n_Note: An unbuilt `Paginator` instance cannot be destroyed._\r\n\r\n```javascript\r\npaginated = paginator(myElement);\r\npaginated.build();\r\npaginated.destroy();\r\n```\r\n\r\n## Contributing\r\n\r\nFind a bug? Want to add improvements? Fork this repo on [GitHub](http://github.com/jakebellacera/paginator) and then submit a pull request. :thumbsup:","google":"UA-26193371-3","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Paginator.js","tagline":"A simple paginator built in JavaScript."}